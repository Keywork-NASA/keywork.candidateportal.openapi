/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    signup(tenant_descriptor: any | undefined, body: CreateCandidateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSignup(_response);
        });
    }

    protected processSignup(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    validate(tenant_descriptor: any | undefined, body: ValidateTokenDto | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Account/validate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidate(_response);
        });
    }

    protected processValidate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    confirm(tenant_descriptor: any | undefined, body: ConfirmUserDto | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Account/confirm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirm(_response);
        });
    }

    protected processConfirm(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    login(tenant_descriptor: any | undefined, body: LoginRequestDto | undefined): Promise<LoginResponseDto> {
        let url_ = this.baseUrl + "/api/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<LoginResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoginResponseDto>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    resetPOST(tenant_descriptor: any | undefined, body: RequestResetPasswordDto | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Account/password/reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetPOST(_response);
        });
    }

    protected processResetPOST(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    resetPUT(tenant_descriptor: any | undefined, body: ResetPasswordDto | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Account/password/reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetPUT(_response);
        });
    }

    protected processResetPUT(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    candidatePUT(candidateId: string, tenant_descriptor: any | undefined, body: UpdateCandidateDto | undefined): Promise<any> {
        let url_ = this.baseUrl + "/api/Candidate/{candidateId}";
        if (candidateId === undefined || candidateId === null)
            throw new Error("The parameter 'candidateId' must be defined.");
        url_ = url_.replace("{candidateId}", encodeURIComponent("" + candidateId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCandidatePUT(_response);
        });
    }

    protected processCandidatePUT(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    candidateGET(candidateId: string, tenant_descriptor: any | undefined): Promise<DisplayCandidateDto> {
        let url_ = this.baseUrl + "/api/Candidate/{candidateId}";
        if (candidateId === undefined || candidateId === null)
            throw new Error("The parameter 'candidateId' must be defined.");
        url_ = url_.replace("{candidateId}", encodeURIComponent("" + candidateId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCandidateGET(_response);
        });
    }

    protected processCandidateGET(response: Response): Promise<DisplayCandidateDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DisplayCandidateDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DisplayCandidateDto>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    resumee(candidateId: string, tenant_descriptor: any | undefined, body: AddCandidateResumeeDto | undefined): Promise<any> {
        let url_ = this.baseUrl + "/api/Candidate/{candidateId}/resumee";
        if (candidateId === undefined || candidateId === null)
            throw new Error("The parameter 'candidateId' must be defined.");
        url_ = url_.replace("{candidateId}", encodeURIComponent("" + candidateId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResumee(_response);
        });
    }

    protected processResumee(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    forgetme(candidateId: string, tenant_descriptor: any | undefined): Promise<any> {
        let url_ = this.baseUrl + "/api/Candidate/{candidateId}/forgetme";
        if (candidateId === undefined || candidateId === null)
            throw new Error("The parameter 'candidateId' must be defined.");
        url_ = url_.replace("{candidateId}", encodeURIComponent("" + candidateId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processForgetme(_response);
        });
    }

    protected processForgetme(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    candidate(tenant_descriptor: any | undefined): Promise<CandidateFieldDto[]> {
        let url_ = this.baseUrl + "/api/Configuration/candidate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCandidate(_response);
        });
    }

    protected processCandidate(response: Response): Promise<CandidateFieldDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CandidateFieldDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CandidateFieldDto[]>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    countries(tenant_descriptor: any | undefined): Promise<StringStringKeyValuePair[]> {
        let url_ = this.baseUrl + "/api/Configuration/countries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCountries(_response);
        });
    }

    protected processCountries(response: Response): Promise<StringStringKeyValuePair[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StringStringKeyValuePair.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringStringKeyValuePair[]>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    portal(tenant_descriptor: any | undefined): Promise<ConfigurationDetailDto> {
        let url_ = this.baseUrl + "/api/Configuration/portal";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPortal(_response);
        });
    }

    protected processPortal(response: Response): Promise<ConfigurationDetailDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ConfigurationDetailDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ConfigurationDetailDto>(<any>null);
    }

    /**
     * @param country (optional) 
     * @param search (optional) 
     * @param skip (optional) 
     * @param take (optional) 
     * @param candidate (optional) 
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    oportunityAll(country: string | undefined, search: string | undefined, skip: number | undefined, take: number | undefined, candidate: string | undefined, tenant_descriptor: any | undefined): Promise<MinifiedOportunity[]> {
        let url_ = this.baseUrl + "/api/Oportunity?";
        if (country === null)
            throw new Error("The parameter 'country' cannot be null.");
        else if (country !== undefined)
            url_ += "Country=" + encodeURIComponent("" + country) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (candidate === null)
            throw new Error("The parameter 'candidate' cannot be null.");
        else if (candidate !== undefined)
            url_ += "Candidate=" + encodeURIComponent("" + candidate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOportunityAll(_response);
        });
    }

    protected processOportunityAll(response: Response): Promise<MinifiedOportunity[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MinifiedOportunity.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MinifiedOportunity[]>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @return Success
     */
    oportunity(oportunityId: number, tenant_descriptor: any | undefined): Promise<DetailedOportunityDto> {
        let url_ = this.baseUrl + "/api/Oportunity/{oportunityId}";
        if (oportunityId === undefined || oportunityId === null)
            throw new Error("The parameter 'oportunityId' must be defined.");
        url_ = url_.replace("{oportunityId}", encodeURIComponent("" + oportunityId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOportunity(_response);
        });
    }

    protected processOportunity(response: Response): Promise<DetailedOportunityDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DetailedOportunityDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DetailedOportunityDto>(<any>null);
    }

    /**
     * @param tenant_descriptor (optional) 
     * @param body (optional) 
     * @return Success
     */
    apply(oportunity: number, tenant_descriptor: any | undefined, body: ApplyOportunityDto | undefined): Promise<any> {
        let url_ = this.baseUrl + "/api/Oportunity/{oportunity}/apply";
        if (oportunity === undefined || oportunity === null)
            throw new Error("The parameter 'oportunity' must be defined.");
        url_ = url_.replace("{oportunity}", encodeURIComponent("" + oportunity));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "tenant-descriptor": tenant_descriptor !== undefined && tenant_descriptor !== null ? "" + tenant_descriptor : "",
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApply(_response);
        });
    }

    protected processApply(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class AddCandidateResumeeDto implements IAddCandidateResumeeDto {
    attachment?: string | undefined;
    attachmentName?: string | undefined;
    attachmentType?: string | undefined;
    readonly hasError?: boolean;
    errors?: string[] | undefined;

    constructor(data?: IAddCandidateResumeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attachment = _data["Attachment"];
            this.attachmentName = _data["AttachmentName"];
            this.attachmentType = _data["AttachmentType"];
            (<any>this).hasError = _data["HasError"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): AddCandidateResumeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddCandidateResumeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Attachment"] = this.attachment;
        data["AttachmentName"] = this.attachmentName;
        data["AttachmentType"] = this.attachmentType;
        data["HasError"] = this.hasError;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        return data; 
    }
}

export interface IAddCandidateResumeeDto {
    attachment?: string | undefined;
    attachmentName?: string | undefined;
    attachmentType?: string | undefined;
    hasError?: boolean;
    errors?: string[] | undefined;
}

export class ApplyOportunityDto implements IApplyOportunityDto {
    attachmentId?: number;
    candidateId?: string;
    coverLetter?: string | undefined;

    constructor(data?: IApplyOportunityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attachmentId = _data["AttachmentId"];
            this.candidateId = _data["CandidateId"];
            this.coverLetter = _data["CoverLetter"];
        }
    }

    static fromJS(data: any): ApplyOportunityDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplyOportunityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AttachmentId"] = this.attachmentId;
        data["CandidateId"] = this.candidateId;
        data["CoverLetter"] = this.coverLetter;
        return data; 
    }
}

export interface IApplyOportunityDto {
    attachmentId?: number;
    candidateId?: string;
    coverLetter?: string | undefined;
}

export class CandidateFieldDto implements ICandidateFieldDto {
    id?: number;
    name?: string | undefined;
    isRequired?: boolean;

    constructor(data?: ICandidateFieldDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.isRequired = _data["IsRequired"];
        }
    }

    static fromJS(data: any): CandidateFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new CandidateFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["IsRequired"] = this.isRequired;
        return data; 
    }
}

export interface ICandidateFieldDto {
    id?: number;
    name?: string | undefined;
    isRequired?: boolean;
}

export class CandidateResumeeDto implements ICandidateResumeeDto {
    id?: number;
    fileExtension?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number;
    description?: string | undefined;
    creationDate?: Date;

    constructor(data?: ICandidateResumeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.fileExtension = _data["FileExtension"];
            this.fileName = _data["FileName"];
            this.fileSize = _data["FileSize"];
            this.description = _data["Description"];
            this.creationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CandidateResumeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CandidateResumeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["FileExtension"] = this.fileExtension;
        data["FileName"] = this.fileName;
        data["FileSize"] = this.fileSize;
        data["Description"] = this.description;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICandidateResumeeDto {
    id?: number;
    fileExtension?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number;
    description?: string | undefined;
    creationDate?: Date;
}

export class ConfigurationDetailDto implements IConfigurationDetailDto {
    companyLogoUrl?: string | undefined;
    bannerImageUrl?: string | undefined;
    bannerVideoUrl?: string | undefined;
    bannerMobile?: string | undefined;
    faviconUrl?: string | undefined;
    menuTitle?: string | undefined;
    bannerTitle?: string | undefined;
    bannerDescription?: string | undefined;
    backgroundMenuColor?: string | undefined;
    backgroundColor?: string | undefined;
    fontColor?: string | undefined;
    primaryColor?: string | undefined;
    buttonFontColor?: string | undefined;
    browserTitle?: string | undefined;
    linkedin?: string | undefined;
    instagram?: string | undefined;
    twitter?: string | undefined;
    facebook?: string | undefined;
    metaDescription?: string | undefined;
    gDPR?: boolean;
    opportunityShareUrl?: string | undefined;
    portalIsEnabled?: boolean;
    defaultLanguage?: string | undefined;
    orderByProfileSkill?: boolean;
    favicon?: string | undefined;
    bannerImage?: string | undefined;
    logo?: string | undefined;
    bannerVideo?: string | undefined;
    webSite?: string | undefined;
    bannerMobileUrl?: string | undefined;
    gDPRLink?: string | undefined;
    opportunityShareImage?: string | undefined;

    constructor(data?: IConfigurationDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyLogoUrl = _data["CompanyLogoUrl"];
            this.bannerImageUrl = _data["BannerImageUrl"];
            this.bannerVideoUrl = _data["BannerVideoUrl"];
            this.bannerMobile = _data["BannerMobile"];
            this.faviconUrl = _data["FaviconUrl"];
            this.menuTitle = _data["MenuTitle"];
            this.bannerTitle = _data["BannerTitle"];
            this.bannerDescription = _data["BannerDescription"];
            this.backgroundMenuColor = _data["BackgroundMenuColor"];
            this.backgroundColor = _data["BackgroundColor"];
            this.fontColor = _data["FontColor"];
            this.primaryColor = _data["PrimaryColor"];
            this.buttonFontColor = _data["ButtonFontColor"];
            this.browserTitle = _data["BrowserTitle"];
            this.linkedin = _data["Linkedin"];
            this.instagram = _data["Instagram"];
            this.twitter = _data["Twitter"];
            this.facebook = _data["Facebook"];
            this.metaDescription = _data["MetaDescription"];
            this.gDPR = _data["GDPR"];
            this.opportunityShareUrl = _data["OpportunityShareUrl"];
            this.portalIsEnabled = _data["PortalIsEnabled"];
            this.defaultLanguage = _data["DefaultLanguage"];
            this.orderByProfileSkill = _data["OrderByProfileSkill"];
            this.favicon = _data["Favicon"];
            this.bannerImage = _data["BannerImage"];
            this.logo = _data["Logo"];
            this.bannerVideo = _data["BannerVideo"];
            this.webSite = _data["WebSite"];
            this.bannerMobileUrl = _data["BannerMobileUrl"];
            this.gDPRLink = _data["GDPRLink"];
            this.opportunityShareImage = _data["OpportunityShareImage"];
        }
    }

    static fromJS(data: any): ConfigurationDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CompanyLogoUrl"] = this.companyLogoUrl;
        data["BannerImageUrl"] = this.bannerImageUrl;
        data["BannerVideoUrl"] = this.bannerVideoUrl;
        data["BannerMobile"] = this.bannerMobile;
        data["FaviconUrl"] = this.faviconUrl;
        data["MenuTitle"] = this.menuTitle;
        data["BannerTitle"] = this.bannerTitle;
        data["BannerDescription"] = this.bannerDescription;
        data["BackgroundMenuColor"] = this.backgroundMenuColor;
        data["BackgroundColor"] = this.backgroundColor;
        data["FontColor"] = this.fontColor;
        data["PrimaryColor"] = this.primaryColor;
        data["ButtonFontColor"] = this.buttonFontColor;
        data["BrowserTitle"] = this.browserTitle;
        data["Linkedin"] = this.linkedin;
        data["Instagram"] = this.instagram;
        data["Twitter"] = this.twitter;
        data["Facebook"] = this.facebook;
        data["MetaDescription"] = this.metaDescription;
        data["GDPR"] = this.gDPR;
        data["OpportunityShareUrl"] = this.opportunityShareUrl;
        data["PortalIsEnabled"] = this.portalIsEnabled;
        data["DefaultLanguage"] = this.defaultLanguage;
        data["OrderByProfileSkill"] = this.orderByProfileSkill;
        data["Favicon"] = this.favicon;
        data["BannerImage"] = this.bannerImage;
        data["Logo"] = this.logo;
        data["BannerVideo"] = this.bannerVideo;
        data["WebSite"] = this.webSite;
        data["BannerMobileUrl"] = this.bannerMobileUrl;
        data["GDPRLink"] = this.gDPRLink;
        data["OpportunityShareImage"] = this.opportunityShareImage;
        return data; 
    }
}

export interface IConfigurationDetailDto {
    companyLogoUrl?: string | undefined;
    bannerImageUrl?: string | undefined;
    bannerVideoUrl?: string | undefined;
    bannerMobile?: string | undefined;
    faviconUrl?: string | undefined;
    menuTitle?: string | undefined;
    bannerTitle?: string | undefined;
    bannerDescription?: string | undefined;
    backgroundMenuColor?: string | undefined;
    backgroundColor?: string | undefined;
    fontColor?: string | undefined;
    primaryColor?: string | undefined;
    buttonFontColor?: string | undefined;
    browserTitle?: string | undefined;
    linkedin?: string | undefined;
    instagram?: string | undefined;
    twitter?: string | undefined;
    facebook?: string | undefined;
    metaDescription?: string | undefined;
    gDPR?: boolean;
    opportunityShareUrl?: string | undefined;
    portalIsEnabled?: boolean;
    defaultLanguage?: string | undefined;
    orderByProfileSkill?: boolean;
    favicon?: string | undefined;
    bannerImage?: string | undefined;
    logo?: string | undefined;
    bannerVideo?: string | undefined;
    webSite?: string | undefined;
    bannerMobileUrl?: string | undefined;
    gDPRLink?: string | undefined;
    opportunityShareImage?: string | undefined;
}

export class ConfirmUserDto implements IConfirmUserDto {
    token?: string | undefined;
    password?: string | undefined;

    constructor(data?: IConfirmUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["Token"];
            this.password = _data["Password"];
        }
    }

    static fromJS(data: any): ConfirmUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Token"] = this.token;
        data["Password"] = this.password;
        return data; 
    }
}

export interface IConfirmUserDto {
    token?: string | undefined;
    password?: string | undefined;
}

export class CreateCandidateDto implements ICreateCandidateDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    linkedin?: string | undefined;
    email?: string | undefined;
    birthDate?: Date | undefined;
    identificationNumber?: string | undefined;
    identificationTypeId?: number | undefined;
    socialSecurityNumber?: string | undefined;
    taxNumber?: string | undefined;
    civilStatusId?: number | undefined;
    studyLevelId?: number | undefined;
    streetName?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    district?: string | undefined;
    county?: string | undefined;
    readonly hasError?: boolean;
    errors?: string[] | undefined;
    attachment?: string | undefined;
    attachmentName?: string | undefined;
    attachmentType?: string | undefined;

    constructor(data?: ICreateCandidateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["FirstName"];
            this.lastName = _data["LastName"];
            this.phone = _data["Phone"];
            this.linkedin = _data["Linkedin"];
            this.email = _data["Email"];
            this.birthDate = _data["BirthDate"] ? new Date(_data["BirthDate"].toString()) : <any>undefined;
            this.identificationNumber = _data["IdentificationNumber"];
            this.identificationTypeId = _data["IdentificationTypeId"];
            this.socialSecurityNumber = _data["SocialSecurityNumber"];
            this.taxNumber = _data["TaxNumber"];
            this.civilStatusId = _data["CivilStatusId"];
            this.studyLevelId = _data["StudyLevelId"];
            this.streetName = _data["StreetName"];
            this.postalCode = _data["PostalCode"];
            this.city = _data["City"];
            this.country = _data["Country"];
            this.district = _data["District"];
            this.county = _data["County"];
            (<any>this).hasError = _data["HasError"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.attachment = _data["Attachment"];
            this.attachmentName = _data["AttachmentName"];
            this.attachmentType = _data["AttachmentType"];
        }
    }

    static fromJS(data: any): CreateCandidateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCandidateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Phone"] = this.phone;
        data["Linkedin"] = this.linkedin;
        data["Email"] = this.email;
        data["BirthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["IdentificationNumber"] = this.identificationNumber;
        data["IdentificationTypeId"] = this.identificationTypeId;
        data["SocialSecurityNumber"] = this.socialSecurityNumber;
        data["TaxNumber"] = this.taxNumber;
        data["CivilStatusId"] = this.civilStatusId;
        data["StudyLevelId"] = this.studyLevelId;
        data["StreetName"] = this.streetName;
        data["PostalCode"] = this.postalCode;
        data["City"] = this.city;
        data["Country"] = this.country;
        data["District"] = this.district;
        data["County"] = this.county;
        data["HasError"] = this.hasError;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Attachment"] = this.attachment;
        data["AttachmentName"] = this.attachmentName;
        data["AttachmentType"] = this.attachmentType;
        return data; 
    }
}

export interface ICreateCandidateDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    linkedin?: string | undefined;
    email?: string | undefined;
    birthDate?: Date | undefined;
    identificationNumber?: string | undefined;
    identificationTypeId?: number | undefined;
    socialSecurityNumber?: string | undefined;
    taxNumber?: string | undefined;
    civilStatusId?: number | undefined;
    studyLevelId?: number | undefined;
    streetName?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    district?: string | undefined;
    county?: string | undefined;
    hasError?: boolean;
    errors?: string[] | undefined;
    attachment?: string | undefined;
    attachmentName?: string | undefined;
    attachmentType?: string | undefined;
}

export class DetailedOportunityDto implements IDetailedOportunityDto {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
    area?: string | undefined;
    specializations?: string[] | undefined;
    description?: string | undefined;
    experienceYears?: number | undefined;
    oportunityType?: string | undefined;
    duration?: number | undefined;
    answearDeadline?: Date | undefined;

    constructor(data?: IDetailedOportunityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.location = _data["Location"];
            this.area = _data["Area"];
            if (Array.isArray(_data["Specializations"])) {
                this.specializations = [] as any;
                for (let item of _data["Specializations"])
                    this.specializations!.push(item);
            }
            this.description = _data["Description"];
            this.experienceYears = _data["ExperienceYears"];
            this.oportunityType = _data["OportunityType"];
            this.duration = _data["Duration"];
            this.answearDeadline = _data["AnswearDeadline"] ? new Date(_data["AnswearDeadline"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DetailedOportunityDto {
        data = typeof data === 'object' ? data : {};
        let result = new DetailedOportunityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Location"] = this.location;
        data["Area"] = this.area;
        if (Array.isArray(this.specializations)) {
            data["Specializations"] = [];
            for (let item of this.specializations)
                data["Specializations"].push(item);
        }
        data["Description"] = this.description;
        data["ExperienceYears"] = this.experienceYears;
        data["OportunityType"] = this.oportunityType;
        data["Duration"] = this.duration;
        data["AnswearDeadline"] = this.answearDeadline ? this.answearDeadline.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDetailedOportunityDto {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
    area?: string | undefined;
    specializations?: string[] | undefined;
    description?: string | undefined;
    experienceYears?: number | undefined;
    oportunityType?: string | undefined;
    duration?: number | undefined;
    answearDeadline?: Date | undefined;
}

export class DisplayCandidateDto implements IDisplayCandidateDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    linkedin?: string | undefined;
    email?: string | undefined;
    birthDate?: Date | undefined;
    identificationNumber?: string | undefined;
    identificationTypeId?: number | undefined;
    socialSecurityNumber?: string | undefined;
    taxNumber?: string | undefined;
    civilStatusId?: number | undefined;
    studyLevelId?: number | undefined;
    streetName?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    district?: string | undefined;
    county?: string | undefined;
    candidateId?: string;
    gDPR?: boolean;
    readonly name?: string | undefined;
    resumees?: CandidateResumeeDto[] | undefined;
    appliedOpportunities?: { [key: string]: string; } | undefined;

    constructor(data?: IDisplayCandidateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["FirstName"];
            this.lastName = _data["LastName"];
            this.phone = _data["Phone"];
            this.linkedin = _data["Linkedin"];
            this.email = _data["Email"];
            this.birthDate = _data["BirthDate"] ? new Date(_data["BirthDate"].toString()) : <any>undefined;
            this.identificationNumber = _data["IdentificationNumber"];
            this.identificationTypeId = _data["IdentificationTypeId"];
            this.socialSecurityNumber = _data["SocialSecurityNumber"];
            this.taxNumber = _data["TaxNumber"];
            this.civilStatusId = _data["CivilStatusId"];
            this.studyLevelId = _data["StudyLevelId"];
            this.streetName = _data["StreetName"];
            this.postalCode = _data["PostalCode"];
            this.city = _data["City"];
            this.country = _data["Country"];
            this.district = _data["District"];
            this.county = _data["County"];
            this.candidateId = _data["CandidateId"];
            this.gDPR = _data["GDPR"];
            (<any>this).name = _data["Name"];
            if (Array.isArray(_data["Resumees"])) {
                this.resumees = [] as any;
                for (let item of _data["Resumees"])
                    this.resumees!.push(CandidateResumeeDto.fromJS(item));
            }
            if (_data["AppliedOpportunities"]) {
                this.appliedOpportunities = {} as any;
                for (let key in _data["AppliedOpportunities"]) {
                    if (_data["AppliedOpportunities"].hasOwnProperty(key))
                        (<any>this.appliedOpportunities)![key] = _data["AppliedOpportunities"][key];
                }
            }
        }
    }

    static fromJS(data: any): DisplayCandidateDto {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayCandidateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Phone"] = this.phone;
        data["Linkedin"] = this.linkedin;
        data["Email"] = this.email;
        data["BirthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["IdentificationNumber"] = this.identificationNumber;
        data["IdentificationTypeId"] = this.identificationTypeId;
        data["SocialSecurityNumber"] = this.socialSecurityNumber;
        data["TaxNumber"] = this.taxNumber;
        data["CivilStatusId"] = this.civilStatusId;
        data["StudyLevelId"] = this.studyLevelId;
        data["StreetName"] = this.streetName;
        data["PostalCode"] = this.postalCode;
        data["City"] = this.city;
        data["Country"] = this.country;
        data["District"] = this.district;
        data["County"] = this.county;
        data["CandidateId"] = this.candidateId;
        data["GDPR"] = this.gDPR;
        data["Name"] = this.name;
        if (Array.isArray(this.resumees)) {
            data["Resumees"] = [];
            for (let item of this.resumees)
                data["Resumees"].push(item.toJSON());
        }
        if (this.appliedOpportunities) {
            data["AppliedOpportunities"] = {};
            for (let key in this.appliedOpportunities) {
                if (this.appliedOpportunities.hasOwnProperty(key))
                    (<any>data["AppliedOpportunities"])[key] = this.appliedOpportunities[key];
            }
        }
        return data; 
    }
}

export interface IDisplayCandidateDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    linkedin?: string | undefined;
    email?: string | undefined;
    birthDate?: Date | undefined;
    identificationNumber?: string | undefined;
    identificationTypeId?: number | undefined;
    socialSecurityNumber?: string | undefined;
    taxNumber?: string | undefined;
    civilStatusId?: number | undefined;
    studyLevelId?: number | undefined;
    streetName?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    district?: string | undefined;
    county?: string | undefined;
    candidateId?: string;
    gDPR?: boolean;
    name?: string | undefined;
    resumees?: CandidateResumeeDto[] | undefined;
    appliedOpportunities?: { [key: string]: string; } | undefined;
}

export class LoginRequestDto implements ILoginRequestDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["Email"];
            this.password = _data["Password"];
        }
    }

    static fromJS(data: any): LoginRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["Password"] = this.password;
        return data; 
    }
}

export interface ILoginRequestDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class LoginResponseDto implements ILoginResponseDto {
    userId?: string;
    token?: string | undefined;

    constructor(data?: ILoginResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["UserId"];
            this.token = _data["Token"];
        }
    }

    static fromJS(data: any): LoginResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId;
        data["Token"] = this.token;
        return data; 
    }
}

export interface ILoginResponseDto {
    userId?: string;
    token?: string | undefined;
}

export class MinifiedOportunity implements IMinifiedOportunity {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
    area?: string | undefined;
    specializations?: string[] | undefined;

    constructor(data?: IMinifiedOportunity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.location = _data["Location"];
            this.area = _data["Area"];
            if (Array.isArray(_data["Specializations"])) {
                this.specializations = [] as any;
                for (let item of _data["Specializations"])
                    this.specializations!.push(item);
            }
        }
    }

    static fromJS(data: any): MinifiedOportunity {
        data = typeof data === 'object' ? data : {};
        let result = new MinifiedOportunity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Location"] = this.location;
        data["Area"] = this.area;
        if (Array.isArray(this.specializations)) {
            data["Specializations"] = [];
            for (let item of this.specializations)
                data["Specializations"].push(item);
        }
        return data; 
    }
}

export interface IMinifiedOportunity {
    id?: number;
    name?: string | undefined;
    location?: string | undefined;
    area?: string | undefined;
    specializations?: string[] | undefined;
}

export class RequestResetPasswordDto implements IRequestResetPasswordDto {
    email?: string | undefined;
    portalUrl?: string | undefined;

    constructor(data?: IRequestResetPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["Email"];
            this.portalUrl = _data["PortalUrl"];
        }
    }

    static fromJS(data: any): RequestResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestResetPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Email"] = this.email;
        data["PortalUrl"] = this.portalUrl;
        return data; 
    }
}

export interface IRequestResetPasswordDto {
    email?: string | undefined;
    portalUrl?: string | undefined;
}

export class ResetPasswordDto implements IResetPasswordDto {
    token?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IResetPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["Token"];
            this.newPassword = _data["NewPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Token"] = this.token;
        data["NewPassword"] = this.newPassword;
        return data; 
    }
}

export interface IResetPasswordDto {
    token?: string | undefined;
    newPassword?: string | undefined;
}

export class StringStringKeyValuePair implements IStringStringKeyValuePair {
    readonly key?: string | undefined;
    readonly value?: string | undefined;

    constructor(data?: IStringStringKeyValuePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).key = _data["Key"];
            (<any>this).value = _data["Value"];
        }
    }

    static fromJS(data: any): StringStringKeyValuePair {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringKeyValuePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Key"] = this.key;
        data["Value"] = this.value;
        return data; 
    }
}

export interface IStringStringKeyValuePair {
    key?: string | undefined;
    value?: string | undefined;
}

export class UpdateCandidateDto implements IUpdateCandidateDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    linkedin?: string | undefined;
    email?: string | undefined;
    birthDate?: Date | undefined;
    identificationNumber?: string | undefined;
    identificationTypeId?: number | undefined;
    socialSecurityNumber?: string | undefined;
    taxNumber?: string | undefined;
    civilStatusId?: number | undefined;
    studyLevelId?: number | undefined;
    streetName?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    district?: string | undefined;
    county?: string | undefined;
    readonly hasError?: boolean;
    errors?: string[] | undefined;

    constructor(data?: IUpdateCandidateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["FirstName"];
            this.lastName = _data["LastName"];
            this.phone = _data["Phone"];
            this.linkedin = _data["Linkedin"];
            this.email = _data["Email"];
            this.birthDate = _data["BirthDate"] ? new Date(_data["BirthDate"].toString()) : <any>undefined;
            this.identificationNumber = _data["IdentificationNumber"];
            this.identificationTypeId = _data["IdentificationTypeId"];
            this.socialSecurityNumber = _data["SocialSecurityNumber"];
            this.taxNumber = _data["TaxNumber"];
            this.civilStatusId = _data["CivilStatusId"];
            this.studyLevelId = _data["StudyLevelId"];
            this.streetName = _data["StreetName"];
            this.postalCode = _data["PostalCode"];
            this.city = _data["City"];
            this.country = _data["Country"];
            this.district = _data["District"];
            this.county = _data["County"];
            (<any>this).hasError = _data["HasError"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateCandidateDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCandidateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Phone"] = this.phone;
        data["Linkedin"] = this.linkedin;
        data["Email"] = this.email;
        data["BirthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["IdentificationNumber"] = this.identificationNumber;
        data["IdentificationTypeId"] = this.identificationTypeId;
        data["SocialSecurityNumber"] = this.socialSecurityNumber;
        data["TaxNumber"] = this.taxNumber;
        data["CivilStatusId"] = this.civilStatusId;
        data["StudyLevelId"] = this.studyLevelId;
        data["StreetName"] = this.streetName;
        data["PostalCode"] = this.postalCode;
        data["City"] = this.city;
        data["Country"] = this.country;
        data["District"] = this.district;
        data["County"] = this.county;
        data["HasError"] = this.hasError;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        return data; 
    }
}

export interface IUpdateCandidateDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
    linkedin?: string | undefined;
    email?: string | undefined;
    birthDate?: Date | undefined;
    identificationNumber?: string | undefined;
    identificationTypeId?: number | undefined;
    socialSecurityNumber?: string | undefined;
    taxNumber?: string | undefined;
    civilStatusId?: number | undefined;
    studyLevelId?: number | undefined;
    streetName?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    district?: string | undefined;
    county?: string | undefined;
    hasError?: boolean;
    errors?: string[] | undefined;
}

export class ValidateTokenDto implements IValidateTokenDto {
    token?: string | undefined;
    portalUrl?: string | undefined;

    constructor(data?: IValidateTokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["Token"];
            this.portalUrl = _data["PortalUrl"];
        }
    }

    static fromJS(data: any): ValidateTokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateTokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Token"] = this.token;
        data["PortalUrl"] = this.portalUrl;
        return data; 
    }
}

export interface IValidateTokenDto {
    token?: string | undefined;
    portalUrl?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}