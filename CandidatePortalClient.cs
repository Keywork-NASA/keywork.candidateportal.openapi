//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace MyNamespace
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;
    
        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }
    
        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SignupAsync(object? tenant_descriptor, CreateCandidateDto? body)
        {
            return SignupAsync(tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SignupAsync(object? tenant_descriptor, CreateCandidateDto? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Account/signup");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> ValidateAsync(object? tenant_descriptor, ValidateTokenDto? body)
        {
            return ValidateAsync(tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> ValidateAsync(object? tenant_descriptor, ValidateTokenDto? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Account/validate");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> ConfirmAsync(object? tenant_descriptor, ConfirmUserDto? body)
        {
            return ConfirmAsync(tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> ConfirmAsync(object? tenant_descriptor, ConfirmUserDto? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Account/confirm");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LoginResponseDto> LoginAsync(object? tenant_descriptor, LoginRequestDto? body)
        {
            return LoginAsync(tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoginResponseDto> LoginAsync(object? tenant_descriptor, LoginRequestDto? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Account/login");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoginResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> ResetPOSTAsync(object? tenant_descriptor, RequestResetPasswordDto? body)
        {
            return ResetPOSTAsync(tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> ResetPOSTAsync(object? tenant_descriptor, RequestResetPasswordDto? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Account/password/reset");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> ResetPUTAsync(object? tenant_descriptor, ResetPasswordDto? body)
        {
            return ResetPUTAsync(tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> ResetPUTAsync(object? tenant_descriptor, ResetPasswordDto? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Account/password/reset");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CandidatePUTAsync(System.Guid candidateId, object? tenant_descriptor, UpdateCandidateDto? body)
        {
            return CandidatePUTAsync(candidateId, tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CandidatePUTAsync(System.Guid candidateId, object? tenant_descriptor, UpdateCandidateDto? body, System.Threading.CancellationToken cancellationToken)
        {
            if (candidateId == null)
                throw new System.ArgumentNullException("candidateId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Candidate/{candidateId}");
            urlBuilder_.Replace("{candidateId}", System.Uri.EscapeDataString(ConvertToString(candidateId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DisplayCandidateDto> CandidateGETAsync(System.Guid candidateId, object? tenant_descriptor)
        {
            return CandidateGETAsync(candidateId, tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DisplayCandidateDto> CandidateGETAsync(System.Guid candidateId, object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            if (candidateId == null)
                throw new System.ArgumentNullException("candidateId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Candidate/{candidateId}");
            urlBuilder_.Replace("{candidateId}", System.Uri.EscapeDataString(ConvertToString(candidateId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisplayCandidateDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> ResumeeAsync(System.Guid candidateId, object? tenant_descriptor, AddCandidateResumeeDto? body)
        {
            return ResumeeAsync(candidateId, tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> ResumeeAsync(System.Guid candidateId, object? tenant_descriptor, AddCandidateResumeeDto? body, System.Threading.CancellationToken cancellationToken)
        {
            if (candidateId == null)
                throw new System.ArgumentNullException("candidateId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Candidate/{candidateId}/resumee");
            urlBuilder_.Replace("{candidateId}", System.Uri.EscapeDataString(ConvertToString(candidateId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> ForgetmeAsync(System.Guid candidateId, object? tenant_descriptor)
        {
            return ForgetmeAsync(candidateId, tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> ForgetmeAsync(System.Guid candidateId, object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            if (candidateId == null)
                throw new System.ArgumentNullException("candidateId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Candidate/{candidateId}/forgetme");
            urlBuilder_.Replace("{candidateId}", System.Uri.EscapeDataString(ConvertToString(candidateId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CandidateFieldDto>> CandidateAsync(object? tenant_descriptor)
        {
            return CandidateAsync(tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CandidateFieldDto>> CandidateAsync(object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Configuration/candidate");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CandidateFieldDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StringStringKeyValuePair>> CountriesAsync(object? tenant_descriptor)
        {
            return CountriesAsync(tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StringStringKeyValuePair>> CountriesAsync(object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Configuration/countries");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StringStringKeyValuePair>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ConfigurationDetailDto> PortalAsync(object? tenant_descriptor)
        {
            return PortalAsync(tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ConfigurationDetailDto> PortalAsync(object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Configuration/portal");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConfigurationDetailDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MinifiedOportunity>> OportunityAllAsync(string? country, string? search, int? skip, int? take, System.Guid? candidate, object? tenant_descriptor)
        {
            return OportunityAllAsync(country, search, skip, take, candidate, tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MinifiedOportunity>> OportunityAllAsync(string? country, string? search, int? skip, int? take, System.Guid? candidate, object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Oportunity?");
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (candidate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Candidate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(candidate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MinifiedOportunity>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DetailedOportunityDto> OportunityAsync(int oportunityId, object? tenant_descriptor)
        {
            return OportunityAsync(oportunityId, tenant_descriptor, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DetailedOportunityDto> OportunityAsync(int oportunityId, object? tenant_descriptor, System.Threading.CancellationToken cancellationToken)
        {
            if (oportunityId == null)
                throw new System.ArgumentNullException("oportunityId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Oportunity/{oportunityId}");
            urlBuilder_.Replace("{oportunityId}", System.Uri.EscapeDataString(ConvertToString(oportunityId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DetailedOportunityDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> ApplyAsync(int oportunity, object? tenant_descriptor, ApplyOportunityDto? body)
        {
            return ApplyAsync(oportunity, tenant_descriptor, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> ApplyAsync(int oportunity, object? tenant_descriptor, ApplyOportunityDto? body, System.Threading.CancellationToken cancellationToken)
        {
            if (oportunity == null)
                throw new System.ArgumentNullException("oportunity");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Oportunity/{oportunity}/apply");
            urlBuilder_.Replace("{oportunity}", System.Uri.EscapeDataString(ConvertToString(oportunity, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (tenant_descriptor != null)
                        request_.Headers.TryAddWithoutValidation("tenant-descriptor", ConvertToString(tenant_descriptor, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AddCandidateResumeeDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Attachment")]
        public string? Attachment { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("AttachmentName")]
        public string? AttachmentName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("AttachmentType")]
        public string? AttachmentType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HasError")]
        public bool? HasError { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Errors")]
        public System.Collections.Generic.ICollection<string>? Errors { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplyOportunityDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("AttachmentId")]
        public int? AttachmentId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CandidateId")]
        public System.Guid? CandidateId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CoverLetter")]
        public string? CoverLetter { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CandidateFieldDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public int? Id { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string? Name { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IsRequired")]
        public bool? IsRequired { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CandidateResumeeDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public int? Id { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("FileExtension")]
        public string? FileExtension { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("FileName")]
        public string? FileName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("FileSize")]
        public double? FileSize { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Description")]
        public string? Description { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CreationDate")]
        public System.DateTimeOffset? CreationDate { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfigurationDetailDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("CompanyLogoUrl")]
        public string? CompanyLogoUrl { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerImageUrl")]
        public string? BannerImageUrl { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerVideoUrl")]
        public string? BannerVideoUrl { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerMobile")]
        public string? BannerMobile { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("FaviconUrl")]
        public string? FaviconUrl { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("MenuTitle")]
        public string? MenuTitle { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerTitle")]
        public string? BannerTitle { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerDescription")]
        public string? BannerDescription { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BackgroundMenuColor")]
        public string? BackgroundMenuColor { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BackgroundColor")]
        public string? BackgroundColor { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("FontColor")]
        public string? FontColor { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PrimaryColor")]
        public string? PrimaryColor { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ButtonFontColor")]
        public string? ButtonFontColor { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BrowserTitle")]
        public string? BrowserTitle { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Linkedin")]
        public string? Linkedin { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Instagram")]
        public string? Instagram { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Twitter")]
        public string? Twitter { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Facebook")]
        public string? Facebook { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("MetaDescription")]
        public string? MetaDescription { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("GDPR")]
        public bool? GDPR { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("OpportunityShareUrl")]
        public string? OpportunityShareUrl { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PortalIsEnabled")]
        public bool? PortalIsEnabled { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("DefaultLanguage")]
        public string? DefaultLanguage { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("OrderByProfileSkill")]
        public bool? OrderByProfileSkill { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Favicon")]
        public string? Favicon { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerImage")]
        public string? BannerImage { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Logo")]
        public string? Logo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerVideo")]
        public string? BannerVideo { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("WebSite")]
        public string? WebSite { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BannerMobileUrl")]
        public string? BannerMobileUrl { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("GDPRLink")]
        public string? GDPRLink { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("OpportunityShareImage")]
        public string? OpportunityShareImage { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConfirmUserDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Token")]
        public string? Token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Password")]
        public string? Password { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateCandidateDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("FirstName")]
        public string? FirstName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("LastName")]
        public string? LastName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Phone")]
        public string? Phone { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Linkedin")]
        public string? Linkedin { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BirthDate")]
        public System.DateTimeOffset? BirthDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IdentificationNumber")]
        public string? IdentificationNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IdentificationTypeId")]
        public int? IdentificationTypeId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("SocialSecurityNumber")]
        public string? SocialSecurityNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("TaxNumber")]
        public string? TaxNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CivilStatusId")]
        public int? CivilStatusId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("StudyLevelId")]
        public int? StudyLevelId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("StreetName")]
        public string? StreetName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string? PostalCode { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string? City { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Country")]
        public string? Country { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("District")]
        public string? District { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public string? County { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HasError")]
        public bool? HasError { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Errors")]
        public System.Collections.Generic.ICollection<string>? Errors { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Attachment")]
        public string? Attachment { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("AttachmentName")]
        public string? AttachmentName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("AttachmentType")]
        public string? AttachmentType { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DetailedOportunityDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public int? Id { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string? Name { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Location")]
        public string? Location { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Area")]
        public string? Area { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Specializations")]
        public System.Collections.Generic.ICollection<string>? Specializations { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Description")]
        public string? Description { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("ExperienceYears")]
        public double? ExperienceYears { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("OportunityType")]
        public string? OportunityType { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Duration")]
        public double? Duration { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("AnswearDeadline")]
        public System.DateTimeOffset? AnswearDeadline { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DisplayCandidateDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("FirstName")]
        public string? FirstName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("LastName")]
        public string? LastName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Phone")]
        public string? Phone { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Linkedin")]
        public string? Linkedin { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BirthDate")]
        public System.DateTimeOffset? BirthDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IdentificationNumber")]
        public string? IdentificationNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IdentificationTypeId")]
        public int? IdentificationTypeId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("SocialSecurityNumber")]
        public string? SocialSecurityNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("TaxNumber")]
        public string? TaxNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CivilStatusId")]
        public int? CivilStatusId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("StudyLevelId")]
        public int? StudyLevelId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("StreetName")]
        public string? StreetName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string? PostalCode { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string? City { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Country")]
        public string? Country { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("District")]
        public string? District { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public string? County { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CandidateId")]
        public System.Guid? CandidateId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("GDPR")]
        public bool? GDPR { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string? Name { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Resumees")]
        public System.Collections.Generic.ICollection<CandidateResumeeDto>? Resumees { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("AppliedOpportunities")]
        public System.Collections.Generic.IDictionary<string, string>? AppliedOpportunities { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LoginRequestDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Password")]
        public string? Password { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LoginResponseDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("UserId")]
        public System.Guid? UserId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Token")]
        public string? Token { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MinifiedOportunity 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public int? Id { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string? Name { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Location")]
        public string? Location { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Area")]
        public string? Area { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Specializations")]
        public System.Collections.Generic.ICollection<string>? Specializations { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RequestResetPasswordDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PortalUrl")]
        public string? PortalUrl { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ResetPasswordDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Token")]
        public string? Token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("NewPassword")]
        public string? NewPassword { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StringStringKeyValuePair 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public string? Key { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public string? Value { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdateCandidateDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("FirstName")]
        public string? FirstName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("LastName")]
        public string? LastName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Phone")]
        public string? Phone { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Linkedin")]
        public string? Linkedin { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string? Email { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("BirthDate")]
        public System.DateTimeOffset? BirthDate { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IdentificationNumber")]
        public string? IdentificationNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("IdentificationTypeId")]
        public int? IdentificationTypeId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("SocialSecurityNumber")]
        public string? SocialSecurityNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("TaxNumber")]
        public string? TaxNumber { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("CivilStatusId")]
        public int? CivilStatusId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("StudyLevelId")]
        public int? StudyLevelId { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("StreetName")]
        public string? StreetName { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string? PostalCode { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string? City { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Country")]
        public string? Country { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("District")]
        public string? District { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public string? County { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("HasError")]
        public bool? HasError { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("Errors")]
        public System.Collections.Generic.ICollection<string>? Errors { get; set; }= default!;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ValidateTokenDto 
    {
        [System.Text.Json.Serialization.JsonPropertyName("Token")]
        public string? Token { get; set; }= default!;
    
        [System.Text.Json.Serialization.JsonPropertyName("PortalUrl")]
        public string? PortalUrl { get; set; }= default!;
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016